#!/usr/bin/env node
'use strict';

const fs = require('fs');
const app = require('../app');
const path = require('path');
const logger = require('../logger');
const minifier = require('../minifier');
const config = require('../config/serverConfig');

function resolvePath(dir, secondDir) {
  const privatePath = path.resolve(path.join(config.privateBase, dir));
  const publicPath = path.resolve(path.join(config.publicBase, secondDir || dir));

  return { publicPath: publicPath, privatePath: privatePath };
}

/**
 * Minifies all files in the directories with a specific extension
 *
 * @returns {undefined} Returns undefined
 */
function minifyDirs() {
  minifier.minifyDir(resolvePath(config.paths.views), 'html');
  minifier.minifyDir(resolvePath(config.paths.styles), 'css');
  minifier.minifyDir(resolvePath(config.paths.scripts), 'js');
}

function moveRequired() {
  const pathObj = resolvePath(config.paths.required, config.paths.scripts);

  fs.readdir(pathObj.privatePath, function(readErr, files) {
    if (readErr) {
      console.log(readErr);
    } else {
      files.forEach(function(file) {
        const fullPrivatePath = path.join(pathObj.privatePath, file);
        const fullPublicPath = path.join(pathObj.publicPath, file);

        fs.createReadStream(fullPrivatePath).pipe(fs.createWriteStream(fullPublicPath));
      });
    }
  });
}

/*
 * Checks if the public directory.
 * Creats it if it doesn't exist
 */
fs.stat(path.resolve(config.publicBase), function(err) {
  if (err) {
    fs.mkdir(path.resolve(config.publicBase), function(dirErr) {
      logger.sendErrorMsg(logger.ErrorCodes.general, 'Mkdir error', dirErr);
    });
  }

  minifyDirs();
  moveRequired();
});

// Sets server port
app.set('port', config.port);

/*
 * Starts Express server
 */
const server = app.listen(app.get('port'), function() {
});

// SocketIO
const io = app.io;

io.attach(server);
